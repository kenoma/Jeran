hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 33)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,33), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 10.8125)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
summary(hrv.data)
summary(hrv.data$FreqAnalysis)
summary(hrv.data$FreqAnalysis[[1]])
hrv.data$FreqAnalysis[[1]]
summary(hrv.data$FreqAnalysis[[1]])
mean(hrv.data$FreqAnalysis[[1]]$ULF)
mean(hrv.data$FreqAnalysis[[1]]$VLF)
mean(hrv.data$FreqAnalysis[[1]]$LF)
mean(hrv.data$FreqAnalysis[[1]]$HF)
mean(hrv.data$FreqAnalysis[[1]]$HRV)
mean(hrv.data$FreqAnalysis[[1]]$LFHF)
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF")
library(RHRV)
#Неплохой туториал по этой библиотеке можно найти тут
#http://rhrv.r-forge.r-project.org/tutorial/tutorial.pdf
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
hrv.data = CreateNonLinearAnalysis(hrv.data)
summary(hrv.data)
hrv.data$NonLinearAnalysis[[1]]
hrv.data = NonlinearityTests(hrv.data)
kTimeLag=CalculateTimeLag(hrv.data,method="first.e.decay",lagMax=100,doPlot=TRUE)
kTimeLag=CalculateTimeLag(hrv.data,method="first.e.decay",lagMax=100,doPlot=FALSE)
kTimeLag
kEmbeddingDim = CalculateEmbeddingDim(hrv.data, numberPoints = 10000,
timeLag = kTimeLag, maxEmbeddingDim = 15)
kEmbeddingDim
hrv.data = CalculateCorrDim(hrv.data, indexNonLinearAnalysis = 1,
minEmbeddingDim = kEmbeddingDim - 1,
maxEmbeddingDim = kEmbeddingDim + 2,
timeLag = kTimeLag,
minRadius=1, maxRadius=100, pointsRadius = 100,
theilerWindow = 20, doPlot = FALSE)
PlotCorrDim(hrv.data,indexNonLinearAnalysis=1)
CalculateSampleEntropy(hrv.data, indexNonLinearAnalysis= 1, doPlot = FALSE)
hrv.data = CalculateDFA(hrv.data, indexNonLinearAnalysis = 1,
windowSizeRange = c(6, 300), npoints = 25, doPlot = TRUE)
hrv.data = EstimateDFA(hrv.data, indexNonLinearAnalysis = 1,
regressionRange = c(20,100), doPlot = TRUE)
hrv.data = RQA(hrv.data, indexNonLinearAnalysis = 1, embeddingDim=kEmbeddingDim,
timeLag = kTimeLag, radius = 2, doPlot=TRUE)
summary(hrv.data)
summary(hrv.data$TimeAnalysis[[1]])
hrv.data$TimeAnalysis[[1]]$SDNN
source.with.encoding('D:/projects/Jeran/firstIteration.R', encoding='UTF-8')
library(RHRV)
#Неплохой туториал по этой библиотеке можно найти тут
#http://rhrv.r-forge.r-project.org/tutorial/tutorial.pdf
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF", "EmbeddingDim")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
line = 0;
for(fn in list.files(dir,pattern="*.bin"))
{
#  fn<-list.files(dir,pattern="*.bin")[1]
#Загружаем csv файл и подготавливаем его для работы с библиотекой RHRV
y<-read.csv(paste(dir, fn, sep="/"))
y<-y[,y$Dilemma>0]
cy <-cumsum(y$RR/1000.0)
y$T<-cy
write(cy,paste(dir, "cumsum/tmp", sep="/"),sep = "\r")
#обрабатываем данные с помощью библиотеки RHRV - фильтруем выбросы, обсчитываем основные показатели
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 33)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,33), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 10.8125)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
hrv.data = CreateNonLinearAnalysis(hrv.data)
line <-line+1;
df[line,"SDNN"]  	<-hrv.data$TimeAnalysis[[1]]$SDNN
df[line,"SDANN"]		<-hrv.data$TimeAnalysis[[1]]$SDANN
df[line,"SDNNIDX"]	<-hrv.data$TimeAnalysis[[1]]$SDNNIDX
df[line,"pNN50"]		<-hrv.data$TimeAnalysis[[1]]$pNN50
df[line,"SDSD"]		<-hrv.data$TimeAnalysis[[1]]$SDSD
df[line,"r.MSSD"]		<-hrv.data$TimeAnalysis[[1]]$r.MSSD
df[line,"IRRR"]		<-hrv.data$TimeAnalysis[[1]]$IRRR
df[line,"MADRR"]		<-hrv.data$TimeAnalysis[[1]]$MADRR
df[line,"TINN"]		<-hrv.data$TimeAnalysis[[1]]$TINN
df[line,"HRV.index"]	<-hrv.data$TimeAnalysis[[1]]$HRV.index
df[line,"ULF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$ULF)
df[line,"VLF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$VLF)
df[line,"LF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$LF)
df[line,"HF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$HF)
df[line,"HRV"]	<-	mean(hrv.data$FreqAnalysis[[1]]$HRV)
df[line,"LFHF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$LFHF)
df[line,"EmbeddingDim"]<-CalculateEmbeddingDim(hrv.data, numberPoints = 10000, timeLag = kTimeLag, maxEmbeddingDim = 15)
}
write.csv(x, file = paste(dir, "cumsum/stats.csv", sep="/"),sep = "\t")
y<-y[y$Dilemma>0,]
summary(t)
summary(y)
library(RHRV)
#Неплохой туториал по этой библиотеке можно найти тут
#http://rhrv.r-forge.r-project.org/tutorial/tutorial.pdf
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF", "EmbeddingDim")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
line = 0;
for(fn in list.files(dir,pattern="*.bin"))
{
#  fn<-list.files(dir,pattern="*.bin")[1]
#Загружаем csv файл и подготавливаем его для работы с библиотекой RHRV
y<-read.csv(paste(dir, fn, sep="/"))
y<-y[y$Dilemma>0,]
cy <-cumsum(y$RR/1000.0)
y$T<-cy
write(cy,paste(dir, "cumsum/tmp", sep="/"),sep = "\r")
#обрабатываем данные с помощью библиотеки RHRV - фильтруем выбросы, обсчитываем основные показатели
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 33)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,33), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 10.8125)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
hrv.data = CreateNonLinearAnalysis(hrv.data)
line <-line+1;
df[line,"SDNN"]  	<-hrv.data$TimeAnalysis[[1]]$SDNN
df[line,"SDANN"]		<-hrv.data$TimeAnalysis[[1]]$SDANN
df[line,"SDNNIDX"]	<-hrv.data$TimeAnalysis[[1]]$SDNNIDX
df[line,"pNN50"]		<-hrv.data$TimeAnalysis[[1]]$pNN50
df[line,"SDSD"]		<-hrv.data$TimeAnalysis[[1]]$SDSD
df[line,"r.MSSD"]		<-hrv.data$TimeAnalysis[[1]]$r.MSSD
df[line,"IRRR"]		<-hrv.data$TimeAnalysis[[1]]$IRRR
df[line,"MADRR"]		<-hrv.data$TimeAnalysis[[1]]$MADRR
df[line,"TINN"]		<-hrv.data$TimeAnalysis[[1]]$TINN
df[line,"HRV.index"]	<-hrv.data$TimeAnalysis[[1]]$HRV.index
df[line,"ULF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$ULF)
df[line,"VLF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$VLF)
df[line,"LF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$LF)
df[line,"HF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$HF)
df[line,"HRV"]	<-	mean(hrv.data$FreqAnalysis[[1]]$HRV)
df[line,"LFHF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$LFHF)
df[line,"EmbeddingDim"]<-CalculateEmbeddingDim(hrv.data, numberPoints = 10000, timeLag = kTimeLag, maxEmbeddingDim = 15)
}
write.csv(x, file = paste(dir, "cumsum/stats.csv", sep="/"),sep = "\t")
}
library(RHRV)
#Неплохой туториал по этой библиотеке можно найти тут
#http://rhrv.r-forge.r-project.org/tutorial/tutorial.pdf
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF", "EmbeddingDim")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
line = 0;
for(fn in list.files(dir,pattern="*.bin"))
{
#  fn<-list.files(dir,pattern="*.bin")[1]
#Загружаем csv файл и подготавливаем его для работы с библиотекой RHRV
y<-read.csv(paste(dir, fn, sep="/"))
y<-y[y$Dilemma>0,]
cy <-cumsum(y$RR/1000.0)
y$T<-cy
write(cy,paste(dir, "cumsum/tmp", sep="/"),sep = "\r")
#обрабатываем данные с помощью библиотеки RHRV - фильтруем выбросы, обсчитываем основные показатели
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 32)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,32), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 10.8125)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
hrv.data = CreateNonLinearAnalysis(hrv.data)
line <-line+1;
df[line,"SDNN"]  	<-hrv.data$TimeAnalysis[[1]]$SDNN
df[line,"SDANN"]		<-hrv.data$TimeAnalysis[[1]]$SDANN
df[line,"SDNNIDX"]	<-hrv.data$TimeAnalysis[[1]]$SDNNIDX
df[line,"pNN50"]		<-hrv.data$TimeAnalysis[[1]]$pNN50
df[line,"SDSD"]		<-hrv.data$TimeAnalysis[[1]]$SDSD
df[line,"r.MSSD"]		<-hrv.data$TimeAnalysis[[1]]$r.MSSD
df[line,"IRRR"]		<-hrv.data$TimeAnalysis[[1]]$IRRR
df[line,"MADRR"]		<-hrv.data$TimeAnalysis[[1]]$MADRR
df[line,"TINN"]		<-hrv.data$TimeAnalysis[[1]]$TINN
df[line,"HRV.index"]	<-hrv.data$TimeAnalysis[[1]]$HRV.index
df[line,"ULF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$ULF)
df[line,"VLF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$VLF)
df[line,"LF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$LF)
df[line,"HF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$HF)
df[line,"HRV"]	<-	mean(hrv.data$FreqAnalysis[[1]]$HRV)
df[line,"LFHF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$LFHF)
df[line,"EmbeddingDim"]<-CalculateEmbeddingDim(hrv.data, numberPoints = 10000, timeLag = kTimeLag, maxEmbeddingDim = 15)
}
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","r-MSSD","IRRR","MADRR","TINN","HRV index","ULF","VLF","LF","HF","HRV","LFHF", "EmbeddingDim")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
line = 0;
for(fn in list.files(dir,pattern="*.bin"))
{
#  fn<-list.files(dir,pattern="*.bin")[1]
#Загружаем csv файл и подготавливаем его для работы с библиотекой RHRV
y<-read.csv(paste(dir, fn, sep="/"))
y<-y[y$Dilemma>0,]
cy <-cumsum(y$RR/1000.0)
y$T<-cy
write(cy,paste(dir, "cumsum/tmp", sep="/"),sep = "\r")
#обрабатываем данные с помощью библиотеки RHRV - фильтруем выбросы, обсчитываем основные показатели
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 32)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,32), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 10.8125)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
hrv.data = CreateNonLinearAnalysis(hrv.data)
line <-line+1;
df[line,"SDNN"]  	<-hrv.data$TimeAnalysis[[1]]$SDNN
df[line,"SDANN"]		<-hrv.data$TimeAnalysis[[1]]$SDANN
df[line,"SDNNIDX"]	<-hrv.data$TimeAnalysis[[1]]$SDNNIDX
df[line,"pNN50"]		<-hrv.data$TimeAnalysis[[1]]$pNN50
df[line,"SDSD"]		<-hrv.data$TimeAnalysis[[1]]$SDSD
df[line,"r-MSSD"]		<-hrv.data$TimeAnalysis[[1]]$r.MSSD
df[line,"IRRR"]		<-hrv.data$TimeAnalysis[[1]]$IRRR
df[line,"MADRR"]		<-hrv.data$TimeAnalysis[[1]]$MADRR
df[line,"TINN"]		<-hrv.data$TimeAnalysis[[1]]$TINN
df[line,"HRV index"]	<-hrv.data$TimeAnalysis[[1]]$HRV.index
df[line,"ULF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$ULF)
df[line,"VLF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$VLF)
df[line,"LF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$LF)
df[line,"HF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$HF)
df[line,"HRV"]	<-	mean(hrv.data$FreqAnalysis[[1]]$HRV)
df[line,"LFHF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$LFHF)
df[line,"EmbeddingDim"]<-CalculateEmbeddingDim(hrv.data, numberPoints = 10000, timeLag = kTimeLag, maxEmbeddingDim = 15)
}
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 8)
debugSource('D:/projects/Jeran/firstIteration.R', encoding='UTF-8')
debugSource('D:/projects/Jeran/firstIteration.R', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
write.csv(x, file = paste(dir, "cumsum/stats.csv", sep="/"),sep = "\t")
write.csv(x, file = paste(dir, "cumsum/stats.csv", sep="/"))
write.csv(df, file = paste(dir, "cumsum/stats.csv", sep="/"),sep = "\t")
write.csv(df, file = paste(dir, "cumsum/stats.csv", sep="/"))
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
library(RHRV)
#Неплохой туториал по этой библиотеке можно найти тут
#http://rhrv.r-forge.r-project.org/tutorial/tutorial.pdf
dir<-"D:/projects/Jeran/Processing";
colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
col.names = c("File","SDNN","SDANN","SDNNIDX","pNN50","SDSD","rMSSD","IRRR","MADRR","TINN","HRVindex","ULF","VLF","LF","HF","HRV","LFHF", "EmbeddingDim")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
line = 0;
for(fn in list.files(dir,pattern="*.bin"))
{
#  fn<-list.files(dir,pattern="*.bin")[1]
y<-read.csv(paste(dir, fn, sep="/"))
y<-y[y$Dilemma>0,]
cy <-cumsum(y$RR/1000.0)
y$T<-cy
write(cy,paste(dir, "cumsum/tmp", sep="/"),sep = "\r")
#обрабатываем данные с помощью библиотеки RHRV - фильтруем выбросы, обсчитываем основные показатели
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE )
hrv.data = LoadBeatAscii(hrv.data, paste(dir, "cumsum/tmp", sep="/"), RecordPath = ".")
hrv.data = BuildNIHR(hrv.data)
hrv.data = FilterNIHR(hrv.data)
hrv.data = EditNIHR(hrv.data)
hrv.data = AddEpisodes(hrv.data,
InitTimes = aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Tags = paste("D", aggregate(y$T, by=list(y$Dilemma), FUN=any)[,1], sep="_"),
Durations = aggregate(y$T, by=list(y$Dilemma), FUN=max)[,2]-aggregate(y$T, by=list(y$Dilemma), FUN=min)[,2],
Values = list(rep(0, 32)))
PlotNIHR(hrv.data, Tag=paste("D", seq(1,32), sep="_"))
hrv.data = InterpolateNIHR (hrv.data, freqhr = 4)
hrv.data = CreateTimeAnalysis(hrv.data, size = 200, interval = 8)
hrv.data = CreateFreqAnalysis(hrv.data)
hrv.data = CalculatePowerBand( hrv.data ,
indexFreqAnalysis= 1,
type = "wavelet",
wavelet = "la8",
bandtolerance = 0.01,
relative = FALSE,
ULFmin = 0,
ULFmax = 0.03,
VLFmin = 0.03,
VLFmax = 0.05,
LFmin = 0.05,
LFmax = 0.15,
HFmin = 0.15,
HFmax = 0.4 )
hrv.data = CreateNonLinearAnalysis(hrv.data)
line <-line+1;
df[line,"File"]    <-fn
df[line,"SDNN"]  	<-hrv.data$TimeAnalysis[[1]]$SDNN
df[line,"SDANN"]		<-hrv.data$TimeAnalysis[[1]]$SDANN
df[line,"SDNNIDX"]	<-hrv.data$TimeAnalysis[[1]]$SDNNIDX
df[line,"pNN50"]		<-hrv.data$TimeAnalysis[[1]]$pNN50
df[line,"SDSD"]		<-hrv.data$TimeAnalysis[[1]]$SDSD
df[line,"rMSSD"]		<-hrv.data$TimeAnalysis[[1]]$rMSSD
df[line,"IRRR"]		<-hrv.data$TimeAnalysis[[1]]$IRRR
df[line,"MADRR"]		<-hrv.data$TimeAnalysis[[1]]$MADRR
df[line,"TINN"]		<-hrv.data$TimeAnalysis[[1]]$TINN
#df[line,"HRVindex"]	<-hrv.data$TimeAnalysis[[1]]$HRVindex
cat("ts")
df[line,"ULF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$ULF)
df[line,"VLF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$VLF)
df[line,"LF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$LF)
df[line,"HF"]		<-	mean(hrv.data$FreqAnalysis[[1]]$HF)
df[line,"HRV"]	<-	mean(hrv.data$FreqAnalysis[[1]]$HRV)
df[line,"LFHF"]	<-	mean(hrv.data$FreqAnalysis[[1]]$LFHF)
cat("fq")
df[line,"EmbeddingDim"]<-CalculateEmbeddingDim(hrv.data, numberPoints = 10000, timeLag = kTimeLag, maxEmbeddingDim = 15)
}
write.csv(df, file = paste(dir, "cumsum/stats.csv", sep="/"))
y<-read.csv(file.choose()
)
summary(y)
hist(y$SDNN)
plot(y$SDNN,y$IRRR)
plot(y$SDNN,y$IRRR, col=y$A)
plot(y$SDNN,y$IRRR, col=y$A+1)
plot(y$SDNN,y$ULF, col=y$A+1)
plot(y$SDNN,y$LFHF, col=y$A+1)
pca(y)
princomp(y)
pcomp(y)
prcomp(y)
summary(y[,c(seq(2,15))])
summary(y[,c(seq(2,19))])
summary(y[,c(seq(3,19))])
prcomp(y[,c(seq(3,19))])
summary(y[,c(seq(2,11))])
summary(y[,c(seq(3,11),seq(13,19))])
prcomp(y[,c(seq(3,11),seq(13,19))])
res<-prcomp(y[,c(seq(3,11),seq(13,19))])
plot(res)
summary(res)
res
res$PC1
res$PC2
res$x
plot(res$x[,1],res$x[,2])
plot(res$x[,1],res$x[,2],col=y$A)
plot(res$x[,1],res$x[,2],col=y$A+1)
plot(res$x[,2],res$x[,3],col=y$A+1)
plot(y,col=y$A+1)
plot(y[,2],y[,3],col=y$A+1)
plot(y[,3],y[,4],col=y$A+1)
plot(y[,3],y[,5],col=y$A+1)
plot(y[,3],y[,6],col=y$A+1)
plot(y[,3],y[,7],col=y$A+1)
plot(y[,3],y[,8],col=y$A+1)
plot(y[,3],y[,9],col=y$A+1)
p1 <- hist(y$SDNN)
summary(y)
p2 <- hist(y$SDANN)
plot( p1, col=rgb(0,0,1,1/4)
)
plot( p2, col=rgb(1,0,0,1/4), add=T)
p1 <- hist(y$SDNN,10)
p2 <- hist(y$SDANN,10)
plot(p1, col=rgb(0,0,1,1/4))
plot(p2, col=rgb(0,0,1,1/4), add=T)
plot(p2, col=rgb(1,0,1,1/4), add=T)
plot(p1, col=rgb(0,0,1,1/4))
plot(p2, col=rgb(1,0,1,1/4), add=T)
p1 <- hist(y$SDNN,10)
p2 <- hist(y$SDANN,10)
plot(p2, col=rgb(0,0,1,1/4))
plot(p1, col=rgb(1,0,1,1/4), add=T)
plot(y$SDNN,y$SDANN)
plot(y$SDNN,y$SDANN,col=y$A)
plot(y$SDNN,y$SDANN,col=y$A+1)
p1 <- hist(y[y$A==0,]$SDNN,10)
p2 <- hist(y[y$A==1,]$SDNN,10)
plot(p2, col=rgb(0,0,1,1/4))
plot(p1, col=rgb(1,0,1,1/4), add=T)
plot(p1, col=rgb(0,0,1,1/4))
plot(p2, col=rgb(1,0,1,1/4), add=T)
p1 <- hist(y[y$A==0,]$SDNN,5)
p2 <- hist(y[y$A==1,]$SDNN,5)
plot(p1, col=rgb(0,0,1,1/4))
plot(p2, col=rgb(1,0,1,1/4), add=T)
source.with.encoding('D:/projects/Jeran/firstIteration.R', encoding='UTF-8')
