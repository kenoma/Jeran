using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.IO;
using OfficeOpenXml;
using ZedGraph;
using System.Drawing;
using System.Threading.Tasks;

namespace Jeran
{
    /// <summary>
    /// Interaction logic for DB.xaml
    /// </summary>
    public partial class DB : Window
    {

        private string[] headers = new string[] { "Date", "Age", "Gender", "Ethnicity", "Education", "Occupation", "CountryLive", "CountryChildhood", "CountryIdentify", "Language", "BirthOrder", "Married", "Children", "MoralCourses", "Books", "ReligionGrow", "ReligionIdentify", "ReligionLevel" };
        List<DilemmaRespondent> resps = new List<DilemmaRespondent>();
        string[] colorNames = ConsoleColor.GetNames(typeof(ConsoleColor));

        public bool RowSelected
        {
            get { return (bool)GetValue(RowSelectedProperty); }
            set { SetValue(RowSelectedProperty, value); }
        }

        // Using a DependencyProperty as the backing store for RowSelected.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty RowSelectedProperty =
            DependencyProperty.Register("RowSelected", typeof(bool), typeof(DB), new PropertyMetadata(false));


        public DB()
        {
            InitializeComponent();
            RowSelected = false;
            if (Directory.Exists("Data"))
            {
                string[] bins = Directory.GetFiles("Data", "*.bin");
                foreach (string fn in bins)
                {
                    var res = ser<DilemmaRespondent>.DeserializefzProtobuf(fn);
                    FileInfo fi = new FileInfo(fn);
                    res.fileName = fi.Name;
                    if (res != null)
                        resps.Add(res);
                }
                dataGrid1.ItemsSource = resps;
                theCombo.ItemsSource = resps;

                dataGrid1.Loaded += (s, e) =>
                { // Column widths
                    foreach (var column in  dataGrid1.Columns)
                    {
                        column.MinWidth = column.ActualWidth;
                        column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
                    };
                };
            }
        }

        private void dataGrid1_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataGrid1.Columns[0].Visibility = System.Windows.Visibility.Hidden;
            for (int i = 18; i < dataGrid1.Columns.Count; i++)
                dataGrid1.Columns[i].Visibility = System.Windows.Visibility.Hidden;
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (Directory.Exists("Data"))
            {
                if (resps.Count != 0)
                {
                    StringBuilder csv = new StringBuilder();
                    csv.Append(string.Concat(headers.Select(z => z + ",")));
                    int dils = resps.Max(z => z.DilemmaAnswers.Count);
                    for (int i = 0; i < dils; i++)
                        csv.Append("Dilemma_" + i + ",HR_" + i + ",ShowTime_" + i + ",ElapsedTime_"+i+",");
                    csv.Remove(csv.Length - 1, 1);
                    csv.Append("\r\n");

                    foreach (var R in resps)
                    {
                        csv.AppendFormat("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18} \r\n",
                            R.Date,
                            R.Age,
                            R.Gender,
                            R.Ethnicity,
                            R.Education,
                            R.Occupation,
                            R.CountryLive,
                            R.CountryChildhood,
                            R.CountryIdentify,
                            R.Language,
                            R.BirthOrder,
                            R.Married,
                            R.Children,
                            R.MoralCourses,
                            R.Books,
                            R.ReligionGrow,
                            R.ReligionIdentify,
                            R.ReligionLevel,
                            ConvertAnswers(R)
                            );
                    }

                    Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                    dlg.FileName = "DilemmaResearch"; // Default file name
                    dlg.DefaultExt = ".csv"; // Default file extension
                    dlg.Filter = "Comma-separated values (.csv)|*.csv"; // Filter files by extension

                    // Show save file dialog box
                    Nullable<bool> result = dlg.ShowDialog();

                    // Process save file dialog box results
                    if (result == true)
                    {
                        // Save document
                        string filename = dlg.FileName;
                        File.WriteAllText(filename, csv.ToString());
                    }
                }
            }
        }

        private string ConvertAnswers(DilemmaRespondent resp)
        {
            string res = "";

            for (int i = 0; i < resp.DilemmaAnswers.Count-1; i++)
                resp.DilemmaAnswers[i]._elapsed = (resp.DilemmaAnswers[i + 1].TimeStart - resp.DilemmaAnswers[i].TimeStart).TotalMilliseconds;

            resp.DilemmaAnswers[resp.DilemmaAnswers.Count - 1]._elapsed = resp.RR.Skip(resp.DilemmaAnswers[resp.DilemmaAnswers.Count - 1].HeartBeatStart).Take(resp.DilemmaAnswers[resp.DilemmaAnswers.Count - 1].HeartBeatEnd - resp.DilemmaAnswers[resp.DilemmaAnswers.Count - 1].HeartBeatStart).Sum(); 
            

            var orderansw = resp.DilemmaAnswers.OrderBy(z => z.Dilemma);
            int index = 0;
            foreach (DilemmaAnswer answ in orderansw)
            {
                var arr = resp.RR.Skip(answ.HeartBeatStart).Take(answ.HeartBeatEnd - answ.HeartBeatStart);
                res += answ.Answer + "," + (
                    resp.RR.Count == 0 || arr.Count() == 0 ?
                    "0" : (60.0 / (arr.Average() / 1000.0)).ToString(System.Globalization.CultureInfo.InvariantCulture)) + "," 
                    + answ.TimeStart.ToString() + ","+
                    answ._elapsed.ToString(System.Globalization.CultureInfo.InvariantCulture)+",";
            }
            res = res.Remove(res.Length - 1);

            return res;
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {

            if (dataGrid1.SelectedValue != null)
            {
                StringBuilder csv = new StringBuilder();
                csv.AppendLine("N, RR, Dilemma");

                DilemmaRespondent resp = (DilemmaRespondent)dataGrid1.SelectedValue;
                for (int n = 0; n < resp.RR.Count; n++)
                {
                    DilemmaAnswer answ = resp.DilemmaAnswers.Find(z => z.HeartBeatStart <= n && z.HeartBeatEnd >= n);
                    if (answ != null)
                        csv.AppendFormat("{0}, {1}, {2}\r\n", n, resp.RR[n], answ.Dilemma);
                    else
                        csv.AppendFormat("{0}, {1}, {2}\r\n", n, resp.RR[n], "0");
                }

                Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                dlg.FileName = resp.fileName;//resp.ID + "_" + resp.Education + "_" + resp.Age + "_" + resp.CountryLive;
                dlg.DefaultExt = ".csv"; // Default file extension
                dlg.Filter = "Comma-separated values (.csv)|*.csv"; // Filter files by extension

                // Show save file dialog box
                Nullable<bool> result = dlg.ShowDialog();

                // Process save file dialog box results
                if (result == true)
                {
                    // Save document
                    string filename = dlg.FileName;
                    File.WriteAllText(filename, csv.ToString());
                }
            }
        }

        private void dataGrid1_Selected_1(object sender, RoutedEventArgs e)
        {
            if (dataGrid1.SelectedValue != null)
                RowSelected = true;
            else
                RowSelected = false;
        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
            dlg.FileName = "DilemmasRes"; // Default file name
            dlg.DefaultExt = ".xlsx"; // Default file extension
            dlg.Filter = "Excel file (.xlsx)|*.xlsx"; // Filter files by extension

            Nullable<bool> result = dlg.ShowDialog();

            if (result == true)
            {
                // Save document
                string filename = dlg.FileName;

                if (File.Exists(filename))
                    File.Delete(filename);

                FileInfo newFile = new FileInfo(filename);
                ExcelPackage book = new ExcelPackage(newFile);

                var sheet = book.Workbook.Worksheets.Add("Dilemmas");
                sheet.View.FreezePanes(2, 1);
                sheet.OutLineSummaryRight = false;
                sheet.OutLineSummaryBelow = false;

                for (int col = 0; col < headers.Length; col++)
                {
                    sheet.Cells[1, col + 1].Value = headers[col];
                    sheet.Cells[1, col + 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                }

                int dils = resps.Max(z => z.DilemmaAnswers.Count);
                for (int i = 0; i < dils; i++)
                {
                    sheet.Cells[1, i + 1 + headers.Length].Value = "Dilemma_" + i;
                    sheet.Cells[1, i + 1 + headers.Length].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    sheet.Cells[1, i + 1 + headers.Length + dils].Value = "HR_" + i;
                    sheet.Cells[1, i + 1 + headers.Length + dils].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    sheet.Cells[1, i + 1 + headers.Length + 2 * dils].Value = "ShowTime_" + i;
                    sheet.Cells[1, i + 1 + headers.Length + 2 * dils].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                }

                foreach (var R in resps)
                {
                    sheet.InsertRow(2, 1);
                    sheet.Cells[2, 1].Value = R.Date;
                    sheet.Cells[2, 2].Value = R.Age;
                    sheet.Cells[2, 3].Value = R.Gender;
                    sheet.Cells[2, 4].Value = R.Ethnicity;
                    sheet.Cells[2, 5].Value = R.Education;
                    sheet.Cells[2, 6].Value = R.Occupation;
                    sheet.Cells[2, 7].Value = R.CountryLive;
                    sheet.Cells[2, 8].Value = R.CountryChildhood;
                    sheet.Cells[2, 9].Value = R.CountryIdentify;
                    sheet.Cells[2, 10].Value = R.Language;
                    sheet.Cells[2, 11].Value = R.BirthOrder;
                    sheet.Cells[2, 12].Value = R.Married;
                    sheet.Cells[2, 13].Value = R.Children;
                    sheet.Cells[2, 14].Value = R.MoralCourses;
                    sheet.Cells[2, 15].Value = R.Books;
                    sheet.Cells[2, 16].Value = R.ReligionGrow;
                    sheet.Cells[2, 17].Value = R.ReligionIdentify;
                    sheet.Cells[2, 18].Value = R.ReligionLevel;

                    var orderansw = R.DilemmaAnswers.OrderBy(z => z.Dilemma).ToArray();

                    for (int i = 0; i < dils; i++)
                    {
                        sheet.Cells[2, i + 1 + headers.Length].Value = orderansw[i].Answer;
                        try
                        {
                            sheet.Cells[2, i + 1 + headers.Length + dils].Value = R.RR.Count == 0 ? 0 : (60.0 / (R.RR.Skip(orderansw[i].HeartBeatStart).Take(orderansw[i].HeartBeatEnd - orderansw[i].HeartBeatStart).Average() / 1000.0));
                        }
                        catch { }
                        sheet.Cells[2, i + 1 + headers.Length + 2 * dils].Value = orderansw[i].TimeStart.ToString();
                    }
                }

                book.Save();
                book.Dispose();
            }
        }

        private void RadioButton_Click_1(object sender, RoutedEventArgs e)
        {

        }

        private void RR_N(object sender, RoutedEventArgs e)
        {
            if (theCombo.SelectedValue != null)
            {
                DilemmaRespondent resp = (DilemmaRespondent)theCombo.SelectedValue;
                Random rnd = new Random();
                
                GraphPane pane = zedGraph.GraphPane;
                PointPairList list = new PointPairList();
                pane.CurveList.Clear();
                for (int i = 0; i < resp.RR.Count; i++)
                    list.Add(i, resp.RR[i]);

                LineItem myCurve = pane.AddCurve("RR " + resp.Date.ToString(), list, System.Drawing.Color.FromName(colorNames[rnd.Next(0, colorNames.Length)]), SymbolType.None);

                pane.Title.Text = "RR rhythmogram ";
                pane.XAxis.Title.Text = "N, heartbeat number";
                pane.YAxis.Title.Text = "RR, ms";
                pane.XAxis.Scale.Max = resp.RR.Count;
                zedGraph.AxisChange();
                zedGraph.Invalidate();
            }

        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            GraphPane pane = zedGraph.GraphPane;
            pane.CurveList.Clear();
            zedGraph.AxisChange();
            zedGraph.Invalidate();
        }

        private void HR_D(object sender, RoutedEventArgs e)
        {
            if (theCombo.SelectedValue != null)
            {
                DilemmaRespondent resp = (DilemmaRespondent)theCombo.SelectedValue;
                Random rnd = new Random();

                GraphPane pane = zedGraph.GraphPane;
                PointPairList list = new PointPairList();
                pane.CurveList.Clear();
                var answers = resp.DilemmaAnswers.OrderBy(z => z.Dilemma).ToArray();

                var collection =resp.RR.Take(answers.First().HeartBeatStart);
                if (collection.Count() != 0)
                    list.Add(0, collection.Average());
                else
                    list.Add(0, 0);

                for (int i = 0; i < answers.Length; i++)
                    try
                    {
                        list.Add(answers[i].Dilemma, resp.RR.Skip(answers[i].HeartBeatStart).Take(answers[i].HeartBeatEnd - answers[i].HeartBeatStart).Average());
                    }
                    catch { }

                try
                {
                    list.Add(answers.Length, resp.RR.Skip(answers.Last().HeartBeatEnd).Average());
                }
                catch { }

                LineItem myCurve = pane.AddCurve("HR " + resp.Date.ToString(), list, System.Drawing.Color.FromName(colorNames[rnd.Next(0, colorNames.Length)]), SymbolType.Circle);

                pane.Title.Text = "HR on dilemmas";
                pane.XAxis.Title.Text = "Dlm, dilemma";
                pane.YAxis.Title.Text = "HR, ms";
                pane.XAxis.Scale.Max = answers.Length + 2;
                zedGraph.AxisChange();
                zedGraph.Invalidate();
            }
        }

        private void Answers(object sender, RoutedEventArgs e)
        {
            GraphPane pane = zedGraph.GraphPane;
            PointPairList list = new PointPairList();
            pane.CurveList.Clear();
            foreach (var resp in resps)
            {
                var answers = resp.DilemmaAnswers.OrderBy(z => z.Dilemma).ToArray();
                foreach (DilemmaAnswer a in resp.DilemmaAnswers)
                    list.Add(a.Dilemma, a.Answer);
            }
            
            LineItem myCurve = pane.AddCurve("Answers ", list, System.Drawing.Color.Black, SymbolType.Circle);
            myCurve.Line.IsVisible = false;
            myCurve.Symbol.Fill.Brush = System.Drawing.Brushes.Black;
            myCurve.Symbol.Size = 4;

            pane.Title.Text = "Common answers";
            pane.XAxis.Title.Text = "N, Dilemma";
            pane.YAxis.Title.Text = "Answer";
            pane.XAxis.Scale.MaxAuto = true;
            zedGraph.AxisChange();
            zedGraph.Invalidate();
        }

        private void RPlot(object sender, RoutedEventArgs e)
        {
            if (theCombo.SelectedValue != null)
            {
                DilemmaRespondent resp = (DilemmaRespondent)theCombo.SelectedValue;
                if (resp.RR.Count != 0)
                {
                    HxMSymbolicHeart.OfflineRplot rplot = new HxMSymbolicHeart.OfflineRplot(resp.RR.ToArray());
                    rplot.ShowDialog();

                }
                else
                    MessageBox.Show("No RR data."); 
            }
        }

    }
}
